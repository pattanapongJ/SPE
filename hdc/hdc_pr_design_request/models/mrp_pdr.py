# -*- coding: utf-8 -*-
# See LICENSE file for full copyright and licensing details.

from odoo import fields, models, api, _
from odoo.exceptions import UserError,ValidationError
from odoo.tools.misc import clean_context
import re

class MRPPDR(models.Model):
    _name = 'mrp.pdr'
    _inherit = ["mail.thread", "mail.activity.mixin"]
    _description = 'MRP Product Design Request'
    _order = "create_date DESC"

    name = fields.Char(string='Order Reference', required=True, copy=False, readonly=True, states={'draft': [('readonly', False)]}, index=True, default=lambda self: _('New'))
    description = fields.Char(string="Description")
    state = fields.Selection([
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('waiting_approve', 'Waiting for Approval'),
        ('approved', 'Approved'),
        ('new_product', 'New Product'),
        ('done', 'Done'),
        ('cancel', 'Cancelled'),
        ], string='Status', readonly=True, default='draft',tracking=True,)
    
    partner_id = fields.Many2one('res.partner', string="Customer", required=True,tracking=True)
    so_count = fields.Integer(compute="_compute_so_count", string="Number of So",tracking=True,)
    product_count = fields.Integer(compute="_compute_so_count", string="Number of New Product",tracking=True,)
    mr_count = fields.Integer(compute="_compute_so_count", string="Number of MR",tracking=True,)
    user_request = fields.Many2one('res.users', string='Request',  default=lambda self: self.env.user, tracking=True,index=True,)
    request_type = fields.Many2one('request.type.mr', string='MFR Type',domain="[('is_design', '=', True)]", required=True, tracking=True,index=True,)
    product_type = fields.Many2one('product.type.mr', string='Product Type', required=True, tracking=True,index=True,)
    # location_src_id = fields.Many2one('stock.location', string='Factory',readonly=True, required=True,states={'draft': [('readonly', False)]})
    # location_dest_id = fields.Many2one('stock.location', string='Delivery',readonly=True, required=True,states={'draft': [('readonly', False)]})
    product_line_ids = fields.One2many('pdr.product.list.line', 'pdr_id',tracking=True,copy=True,states={'new_product': [('readonly', False)]})
    request_date = fields.Datetime(string='Request Date/Time',default=fields.Datetime.now,tracking=True,)
    due_date = fields.Date(string='Delivery Date',default=fields.Datetime.now,tracking=True,)
    department_id  = fields.Many2one('hr.department', string='Production', required=True, tracking=True, index=True,)
    # mr_id  = fields.One2many('mrp.mr', string='Manufacturing Request', tracking=True,index=True,)
    so_id  = fields.Many2one('sale.order', string='SO No.',  tracking=True,index=True,)
    ref_no = fields.Char(string="Ref No.", copy=False)
    design_group = fields.Char(string="Design Group")
    remark = fields.Text(string="Remark")
    quotation_id = fields.Many2one('quotation.order', string='Quotation',copy=False )

    @api.onchange('product_type')
    def _onchange_product_type(self):
        if self.product_type.department_id :
           self.department_id = self.product_type.department_id

    def _compute_so_count(self):
        so_id = self.env['sale.order'].search([('pdr_id', 'in', self.ids)])
        do_ids = self.env['product.template'].search([('pdr_id', 'in', self.ids)])
        mr_id = self.env['mrp.mr'].search([('pdr_id', 'in', self.ids)])
        self.so_count = len(so_id)
        self.product_count = len(do_ids)
        self.mr_count = len(mr_id)

    def action_open_url_design(self):
        url_design = self.design_group
        if url_design:
            return {
                'type': 'ir.actions.act_url',
                'url': url_design,
                'target': 'new',
            }
        else:
            raise UserError("Please Input Link in the Design Group.")
    
    def action_mo_ids(self):
        so_ids = self.env['sale.order'].search([('pdr_id', '=', self.id)])
        action = {
            'res_model': 'sale.order',
            'type': 'ir.actions.act_window',
        }
        if len(so_ids) == 1:
            action.update({
                'view_mode': 'form',
                'res_id': so_ids[0].id,
            })
        else:
            action.update({
                'name': _("Sale Orders Generated by %s", self.name),
                'domain': [('id', 'in', so_ids.ids)],
                'view_mode': 'tree,form',
            })
        return action
    
    def action_delivery_ids(self):
        product_ids = self.env['product.template'].search([('pdr_id', '=', self.id)])
        action = {
            'res_model': 'product.template',
            'type': 'ir.actions.act_window',
        }
        if len(product_ids) == 1:
            action.update({
                'view_mode': 'form',
                'res_id': product_ids[0].id,
            })
        else:
            action.update({
                'name': _("New Product Generated by %s", self.name),
                'domain': [('id', 'in', product_ids.ids)],
                'view_mode': 'tree,form',
            })
        return action
    
    def action_mr_ids(self):
        product_ids = self.env['mrp.mr'].search([('pdr_id', '=', self.id)])
        action = {
            'res_model': 'mrp.mr',
            'type': 'ir.actions.act_window',
            'view_mode': 'form',
            'res_id': product_ids[0].id,
            }
        return action
    
    def action_confirme(self):
        self.state= "confirmed"

    def action_to_approve(self):
        self.state= "waiting_approve"

    def action_approved(self):
        for line in self.product_line_ids:
            if not line.bom_component:  # หาก bom_component เป็น False หรือว่าง
                raise UserError(
                    f"กรุณากรอกข้อมูลในฟิลด์ 'BOM Component' สำหรับสินค้า: {line.product_name}"
                )
            if not line.factory_price:
                raise UserError(
                    f"กรุณากรอกข้อมูลในฟิลด์ 'Factory Price' สำหรับสินค้า: {line.product_name}"
                )
            if not line.standard_price:  # ตัวอย่างเงื่อนไข
                line.standard_price = line.factory_price
            
        self.state = "new_product"

    def action_revise(self):
        self.state= "draft"

    def action_set_to_draft(self):
        self.state= "cancel"



    def action_create_product_confirm(self):
        return {
                'type': 'ir.actions.act_window',
                'name': 'Create New Product',
                'res_model': 'wizard.pdr.new.product.confirm',
                'view_mode': 'form',
                'target': 'new',
                'context': {'default_pdr_id': self.id},
            }

    def action_create_product(self):
        order_lines = []
        for prd in self.product_line_ids:
            if not prd.categ_id:
                raise UserError(
                    f"กรุณากรอกข้อมูลในฟิลด์ 'Category' สำหรับสินค้า: {prd.product_name}"
                )
            
            product = self.env['product.product'].create({
                'name': prd.product_name,
                'categ_id': prd.categ_id.id,
                'default_code': prd.default_code,
                'ref_item_fac': prd.ref_item_fac,
                'barcode': prd.barcode,
                'list_price': prd.list_price,
                'standard_price': prd.standard_price,
                'pdr_id': prd.pdr_id.id,
                'uom_id': prd.uom_id.id,
                'uom_po_id': prd.uom_id.id,
                'type': 'product',
                'route_ids': [(6, 0, [
                    self.env.ref('stock.route_warehouse0_mto').id,
                    self.env.ref('mrp.route_warehouse0_manufacture').id
                ])],
            })
            if prd.bom_component:
                bom_vals = {
                    'product_tmpl_id': product.product_tmpl_id.id,
                    'product_qty': 1,
                    'type': 'normal',
                    'bom_line_ids': [(0, 0, {
                        'product_id': component.product_id.id,
                        'product_qty': component.product_qty,
                        'product_uom_id': component.uom_id.id,
                    }) for component in prd.bom_component],
                }
                bom = self.env['mrp.bom'].create(bom_vals)
            prd.product_id = product.id
            if self.quotation_id:
                order_line_vals = {
                    'product_id': product.id,
                    'product_uom_qty': prd.demand_qty or 1,
                    'price_unit': prd.list_price,
                    'sale_price_marketing': prd.sale_price_marketing,
                    # 'sale_price_a': prd.sale_price_a,
                    # 'sale_price_b': prd.sale_price_b,
                    'name': prd.description or product.name,
                    'product_uom': prd.uom_id.id,
                }
                order_lines.append((0, 0, order_line_vals))

        if order_lines and self.quotation_id:
            self.quotation_id.write({'quotation_line': order_lines})
        self.state = "done"

    def action_create_mr(self):
        return {
                'type': 'ir.actions.act_window',
                'name': 'Create Manufacturing Request',
                'res_model': 'wizard.pdr.create.mr',
                'view_mode': 'form',
                'target': 'new',
                'context': {'default_pdr_id': self.id,
                            'default_remark': self.remark,
                            },
            }


    def btn_create_new_product_line(self):
        return {
                'type': 'ir.actions.act_window',
                'name': 'Selection Product',
                'res_model': 'wizard.pdr.new.product',
                'view_mode': 'form',
                'target': 'new',
                'context': {'default_pdr_id': self.id},
            }

    @api.model
    def create(self, vals):
        if vals.get('name', _('New')) == _('New'):
            seq_date = fields.Date.context_today(self)
            vals["name"] = (
                self.env["ir.sequence"]
                .with_company(self.env.company.id)
                .next_by_code("mrp.pdr.code", sequence_date=seq_date)
            )
        result = super(MRPPDR, self).create(vals)
        quotation_id = vals.get('quotation_id')
        if quotation_id:
            quotation = self.env['quotation.order'].browse(quotation_id)
            if quotation:
                quotation.write({'pdr_id': [(4, result.id)]})

        return result
    
    check_access_role = fields.Selection(
        [('main_admin', 'Main Admin'),('admin', 'Admin'),
         ('access', 'Access'),
         ('user', 'Users')],
        compute='_compute_check_access_role',
        string='Check Access Role',
        # store=True,
        default=lambda self: self._default_check_access_role(),  # กำหนด default
        copy=False
    )

    @api.depends('check_access_role')
    def _compute_check_access_role(self):
        for record in self:
            # แอดมิน
            if self.env.user.has_group('hdc_pr_design_request.group_admin_product_design'):
                record.check_access_role = 'main_admin'
            # โรงงาน
            elif self.env.user.has_group('hdc_pr_design_request.group_can_edit_product_design'):
                record.check_access_role = 'admin'
            # ลาดพร้าว
            elif self.env.user.has_group('hdc_pr_design_request.group_product_design'):
                record.check_access_role = 'access'
            else:
                record.check_access_role = 'user'

    def _default_check_access_role(self):
        if self.env.user.has_group('hdc_pr_design_request.group_admin_product_design'):
            return 'main_admin'
        if self.env.user.has_group('hdc_pr_design_request.group_can_edit_product_design'):
            return 'admin'
        elif self.env.user.has_group('hdc_pr_design_request.group_product_design'):
            return 'access'
        else:
            return 'user'

class MRPMR(models.Model):
    _inherit = 'mrp.mr'

    pdr_id = fields.Many2one('mrp.pdr', string='Product Design Request', ondelete='cascade',readonly=True)

    def action_approved(self):
        for mr in self:
            for product_line in mr.product_line_ids:
                bom = self.env['mrp.bom'].sudo().search([('product_tmpl_id', '=', product_line.product_id.product_tmpl_id.id)], limit=1)
                if product_line.product_id.is_repair != True:
                    if not bom:
                        raise UserError(_("Please Check %s Don't have BOM.")%product_line.product_id.name)
        return super(MRPMR, self).action_approved()
    
class PDRroductListLine(models.Model):
    _name = 'pdr.product.list.line'
    _description = 'PDR Product List Line'

    @api.model
    def _get_domain_uom(self):
        cat_uom_id = self.env['uom.category'].search([('name', '=', 'Unit')],limit=1)
        uom_ids = self.env['uom.uom'].search([('category_id', '=', cat_uom_id.id)])
        return [('id','in',uom_ids.ids)]

    pdr_id = fields.Many2one('mrp.pdr', string='pdr id', ondelete='cascade')
    state = fields.Selection(related='pdr_id.state', string='state',)
    # mo_id = fields.Many2one('mrp.production', string='mo', ondelete='cascade', readonly=True,copy=False)
    product_id = fields.Many2one("product.product", string="Product", readonly=True , copy=False,domain=[('type', '=', 'product'), ('bom_ids', '!=', False)])
    categ_id = fields.Many2one('product.category', string='Product Category')
    
    product_name = fields.Char(string="Product", required=True)
    description = fields.Char(string="Description",)
    demand_qty = fields.Float(string="Demand",digits='Product Unit of Measure',default=0.0, required=True)
    remark = fields.Char(string="Remark",)
    uom_id = fields.Many2one("uom.uom", string="Unit of Measure", required=True,domain=lambda self: self._get_domain_uom(),)
    design_icon = fields.Char(string="Design Action Icon",)
    default_code = fields.Char( string='Internal Reference')
    ref_item_fac = fields.Char(string = 'Ref. Item Fac')
    barcode = fields.Char( string='Barcode')
    standard_price = fields.Float(string='Cost', digits='Product Price',required=True)
    standard_price_lp = fields.Float(string='Cost ลาดพร้าว', digits='Product Price')
    # list_price = fields.Float(string='Sale Price', digits='Product Price',required=True, groups = "product_cost_security.group_product_public_price")
    list_price = fields.Float(string='Sale Price', digits='Product Price',required=True)
    sale_price_marketing = fields.Float(string='Sale Price MKT.', digits='Product Price')
    discount_sale_price_marketing = fields.Float(string='Amount MKT.', digits='Product Price')
    triple_discount = fields.Char(string="Discount")
    bom_component = fields.One2many(
        comodel_name="pdr.new.product.bom",
        inverse_name='new_product_id',
        string="Component",
    )
    factory_price = fields.Float(string="Factory Price", digits='Product Price')
    sale_price_a = fields.Float(string='ราคาขาย A', digits='Product Price')
    sale_price_b = fields.Float(string='ราคาขาย B', digits='Product Price')
    # @api.onchange('state')
    # def _onchange_standard_price(self):
    #     """
    #     ดึงค่า factory_cost จาก product_id เมื่อ state เป็น new_product
    #     """
    #     if self.state == 'new_product':
    #         self.standard_price = self.factory_price

    @api.onchange('uom_id')
    def _onchange_uom_id(self):
        uom_ids = self._get_domain_uom()
        return {"domain": {"uom_id": uom_ids}}
    
    def unlink(self):
        # ตรวจสอบสถานะก่อนที่จะลบ
        for record in self:
            if record.state in ['confirmed','waiting_approve','approved','new_product','done','cancel',]:
                raise UserError("ไม่สามารถลบได้")
        # ลบบันทึก
        return super(PDRroductListLine, self).unlink()
    # state = fields.Selection(related='mo_id.state', string='Status', readonly=True, default='draft',tracking=True,copy=False,)
    
    # @api.onchange('product_id')
    # def _onchange_product_id(self):
    #     self.uom_id = self.product_id.uom_id.id

    @api.onchange('triple_discount','sale_price_marketing', 'demand_qty','uom_id')
    def _compute_amount(self):
        for line in self:
            total_dis = 0.0
            price_total = line.sale_price_marketing * line.demand_qty
            if line.triple_discount:
                try:
                    discounts = line.triple_discount.replace(" ", "").split("+")
                    pattern = re.compile(r'^\d+(\.\d+)?%$|^\d+(\.\d+)?$')

                    for discount in discounts:
                        if not pattern.match(discount):
                            raise ValidationError(_('Invalid Discount format : 20%+100'))

                    for discount in discounts:
                        if discount.endswith("%"):
                            dis_percen = discount.replace("%", "")
                            total_percen = ((price_total) * float(dis_percen)) / 100
                            price_total -= total_percen
                            total_dis += total_percen
                        else:
                            total_baht = float(discount) 
                            price_total -= total_baht
                            total_dis += total_baht
                except:
                    raise ValidationError(_('Invalid Discount format : 20%+100'))

            price = (line.sale_price_marketing * line.demand_qty) - total_dis
            # taxes = line.tax_id.compute_all(price, line.order_id.currency_id, 1,
            #                                 product=line.product_id, partner=line.order_id.partner_shipping_id)
            
            line.update({
                'discount_sale_price_marketing': price,
            })


class PDRNewProductBOM(models.TransientModel):
    _name = 'pdr.new.product.bom'
    _description = 'New Product Bom'

    new_product_id = fields.Many2one(comodel_name="pdr.product.list.line",string="SaleEstimateJob",)
    product_id = fields.Many2one("product.product", string="Product", required=True ,domain=[('type', '=', 'product')])
    product_qty = fields.Float(string='Quantity', digits='Product Unit of Measure',required=True,default=1.00)
    uom_id = fields.Many2one("uom.uom", string="Unit of Measure" , required=True)

    @api.onchange('product_id')
    def _onchange_product_id(self):
        self.uom_id = self.product_id.uom_id.id

class SaleOrder(models.Model):
    _inherit = 'sale.order'

    pdr_id = fields.One2many('mrp.pdr','so_id', string='pdr id', ondelete='cascade')

    
class ProductTemplate(models.Model):
    _inherit = "product.template"

    pdr_id = fields.Many2one('mrp.pdr', string='pdr id', ondelete='cascade')
    design_icon = fields.Char(string="Design Action Icon",)
    
    below_cost = fields.Boolean("Approve Below Cost", default=False)
